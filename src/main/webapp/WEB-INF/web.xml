<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns="http://xmlns.jcp.org/xml/ns/javaee"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd"
         version="4.0">
  <display-name>Archetype Created Web Application</display-name>

  <!--1.在项目启动的时候实例化IoC容器-->
  <listener>
    <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
  </listener>

  <!--2.指定IoC容器文件的位置【主要放的是dao层和service层的bean】-->
  <context-param>
    <param-name>contextConfigLocation</param-name>
    <param-value>classpath:spring/applicationContext.xml</param-value>
  </context-param>

  <!--==========================通过filter建立字符编码过滤器防止出现乱码=========================-->
  <filter>
    <filter-name>characterEncodingFilter</filter-name>
    <filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
    <!--配置上下文参数【键值对】-->
    <!--<init-param>是servlet范围内的参数，只能在servlet类的init()方法中取得-->
    <init-param>
      <param-name>encoding</param-name>
      <param-value>utf-8</param-value>
    </init-param>
    <!--强制所有请求方式（get，post）均执行改编码过滤器-->
    <init-param>
      <param-name>forceEncoding</param-name>
      <param-value>true</param-value>
    </init-param>
  </filter>
  <filter-mapping>
    <filter-name>characterEncodingFilter</filter-name>
    <url-pattern>/*</url-pattern>
  </filter-mapping>


  <!-- 解决PUT请求无法提交表单数据的问题 -->

  <filter>
    <filter-name>HttpMethodFilter</filter-name>
    <filter-class>org.springframework.web.filter.HttpPutFormContentFilter</filter-class>
  </filter>
  <filter-mapping>
    <filter-name>HttpMethodFilter</filter-name>
    <url-pattern>/*</url-pattern>
  </filter-mapping>


  <!-- 将POST请求转化为DELETE或者是PUT 要用_method指定真正的请求参数 -->
  <filter>
    <filter-name>HiddenHttpMethodFilter</filter-name>
    <filter-class>org.springframework.web.filter.HiddenHttpMethodFilter</filter-class>
  </filter>
  <filter-mapping>
    <filter-name>HiddenHttpMethodFilter</filter-name>
    <url-pattern>/*</url-pattern>
  </filter-mapping>


  <!--==============================配置前端控制器==================================-->
  <servlet>
    <servlet-name>dispatcherServlet</servlet-name>
    <!--DispatcherServlet是springMVC的入口-->
    <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
    <!--告知次级控制器的位置【即放controller对象的容器位置】-->
    <init-param>
      <param-name>contextConfigLocation</param-name>
      <param-value>classpath:spring/SpringMVC.xml</param-value>
    </init-param>
    <!--正整数表示在项目启动的时候就实例化与初始化【init】该DispatcherServlet前端控制器-->
    <load-on-startup>1</load-on-startup>
  </servlet>
  <servlet-mapping>
    <servlet-name>dispatcherServlet</servlet-name>
    <url-pattern>/</url-pattern>
  </servlet-mapping>
  <error-page>
    <error-code>404</error-code>
    <location>/WEB-INF/jsp/404.jsp</location>
  </error-page>
  <error-page>
    <error-code>500</error-code>
    <location>/WEB-INF/jsp/500.jsp</location>
  </error-page>
  <!--配置欢迎页面-->
  <welcome-file-list>
    <welcome-file>/WEB-INF/jsp/homepage.jsp</welcome-file>
  </welcome-file-list>

</web-app>
