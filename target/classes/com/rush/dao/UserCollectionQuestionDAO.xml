<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.rush.dao.UserCollectionQuestionDAO">
  <cache type="com.rush.util.RedisCache"/>
  <resultMap id="BaseResultMap" type="com.rush.entity.UserCollectionQuestion">
    <id column="user_collection_question_id" jdbcType="INTEGER" property="userCollectionQuestionId" />
    <result column="user_id" jdbcType="INTEGER" property="userId" />
    <result column="question_id" jdbcType="INTEGER" property="questionId" />
    <result column="user_collection_question_status" jdbcType="INTEGER" property="userCollectionQuestionStatus" />
    <result column="user_collection_question_spare" jdbcType="VARCHAR" property="userCollectionQuestionSpare" />
  </resultMap>
  <sql id="Base_Column_List">
    user_collection_question_id, user_id, question_id, user_collection_question_status, 
    user_collection_question_spare
  </sql>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from user_collection_question
    where user_collection_question_id = #{userCollectionQuestionId,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from user_collection_question
    where user_collection_question_id = #{userCollectionQuestionId,jdbcType=INTEGER}
  </delete>
  <insert id="insert" parameterType="com.rush.entity.UserCollectionQuestion">
    insert into user_collection_question (user_collection_question_id, user_id, 
      question_id, user_collection_question_status, 
      user_collection_question_spare)
    values (#{userCollectionQuestionId,jdbcType=INTEGER}, #{userId,jdbcType=INTEGER}, 
      #{questionId,jdbcType=INTEGER}, #{userCollectionQuestionStatus,jdbcType=INTEGER}, 
      #{userCollectionQuestionSpare,jdbcType=VARCHAR})
  </insert>
  <insert id="insertSelective" parameterType="com.rush.entity.UserCollectionQuestion">
    insert into user_collection_question
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="userCollectionQuestionId != null">
        user_collection_question_id,
      </if>
      <if test="userId != null">
        user_id,
      </if>
      <if test="questionId != null">
        question_id,
      </if>
      <if test="userCollectionQuestionStatus != null">
        user_collection_question_status,
      </if>
      <if test="userCollectionQuestionSpare != null">
        user_collection_question_spare,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="userCollectionQuestionId != null">
        #{userCollectionQuestionId,jdbcType=INTEGER},
      </if>
      <if test="userId != null">
        #{userId,jdbcType=INTEGER},
      </if>
      <if test="questionId != null">
        #{questionId,jdbcType=INTEGER},
      </if>
      <if test="userCollectionQuestionStatus != null">
        #{userCollectionQuestionStatus,jdbcType=INTEGER},
      </if>
      <if test="userCollectionQuestionSpare != null">
        #{userCollectionQuestionSpare,jdbcType=VARCHAR},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.rush.entity.UserCollectionQuestion">
    update user_collection_question
    <set>
      <if test="userId != null">
        user_id = #{userId,jdbcType=INTEGER},
      </if>
      <if test="questionId != null">
        question_id = #{questionId,jdbcType=INTEGER},
      </if>
      <if test="userCollectionQuestionStatus != null">
        user_collection_question_status = #{userCollectionQuestionStatus,jdbcType=INTEGER},
      </if>
      <if test="userCollectionQuestionSpare != null">
        user_collection_question_spare = #{userCollectionQuestionSpare,jdbcType=VARCHAR},
      </if>
    </set>
    where user_collection_question_id = #{userCollectionQuestionId,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.rush.entity.UserCollectionQuestion">
    update user_collection_question
    set user_id = #{userId,jdbcType=INTEGER},
      question_id = #{questionId,jdbcType=INTEGER},
      user_collection_question_status = #{userCollectionQuestionStatus,jdbcType=INTEGER},
      user_collection_question_spare = #{userCollectionQuestionSpare,jdbcType=VARCHAR}
    where user_collection_question_id = #{userCollectionQuestionId,jdbcType=INTEGER}
  </update>

  <select id="selectByUserIdAndQuestionId" parameterType="com.rush.entity.CollectBean" resultType="java.lang.Integer">
    select count(user_collection_question_id)
    from user_collection_question
    where user_id = #{userId} and question_id = #{questionId}
  </select>


  <select id="selectUserCollectionQuestionsByUserId" resultMap="BaseResultMap" parameterType="java.lang.Integer">
    select
    <include refid="Base_Column_List"/>
    from user_collection_question
    where user_id = #{userId,jdbcType=INTEGER}
  </select>

  <update id="updateTagNameByUserIdAndQuestionId" parameterType="java.util.Map">
    update user_collection_question set user_collection_question_spare = #{tagName,jdbcType=VARCHAR}
    where question_id = #{questionId,jdbcType=INTEGER} and user_id=#{userId}
  </update>

  <delete id="deleteQuestionByUserIdAndQuestionId" parameterType="java.util.Map">
    delete from user_collection_question
    where question_id = #{questionId,jdbcType=INTEGER} and user_id=#{userId}
  </delete>


  <select id="selectUserCollectionsByUserId" resultMap="BaseResultMap" parameterType="java.lang.Integer">
    select
    <include refid="Base_Column_List"/>
    from user_collection_question
    where user_id = #{userId,jdbcType=INTEGER} order by user_collection_question_id desc limit 0,8
  </select>

  <!--查询收藏的题目所需要的信息-->
  <select id="selectAllCollectionQuestionsByUserId" parameterType="java.lang.Integer" resultType="com.rush.util.CollectionQuestion">
    select qb.question_id,qb.question_context,qb.question_type_language,qp.question_paper_id,qp.question_paper_title
    from question_bank qb join question_paper qp
    on qb.question_bank_spare=qp.question_paper_id
    join user_collection_question ucq
    on ucq.question_id=qb.question_id
    where ucq.user_id=#{userId} and user_collection_question_status=0
  </select>
</mapper>